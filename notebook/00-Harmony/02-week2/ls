{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# https://calculator.aws/#/\n",
    "\n",
    "---\n",
    "\n",
    "## https://aws.amazon.com/ec2/instance-types/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# it would be nice to do this from python \n",
    "\n",
    "- no permissions for AWS\n",
    "- assumed-role/lsds-developer-ec2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "ClientError",
     "evalue": "An error occurred (AccessDeniedException) when calling the GetProducts operation: User: arn:aws:sts::574826924367:assumed-role/lsds-developer-ec2/i-0dc8948de87469b0f is not authorized to perform: pricing:GetProducts",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mClientError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-d4c855d47437>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;31m# Get current price for a given instance, region and os\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m \u001b[0mprice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mget_region_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'eu-west-1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'c5.xlarge'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Linux'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-10-d4c855d47437>\u001b[0m in \u001b[0;36mget_price\u001b[0;34m(region, instance, os)\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mregion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minstance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFLT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mregion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minstance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_products\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mServiceCode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'AmazonEC2'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFilters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m     \u001b[0mod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PriceList'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'terms'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'OnDemand'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mid1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/tljh/user/lib/python3.7/site-packages/botocore/client.py\u001b[0m in \u001b[0;36m_api_call\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    355\u001b[0m                     \"%s() only accepts keyword arguments.\" % py_operation_name)\n\u001b[1;32m    356\u001b[0m             \u001b[0;31m# The \"self\" in this scope is referring to the BaseClient.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 357\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_api_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moperation_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    358\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    359\u001b[0m         \u001b[0m_api_call\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpy_operation_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/tljh/user/lib/python3.7/site-packages/botocore/client.py\u001b[0m in \u001b[0;36m_make_api_call\u001b[0;34m(self, operation_name, api_params)\u001b[0m\n\u001b[1;32m    674\u001b[0m             \u001b[0merror_code\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsed_response\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Error\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Code\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0merror_class\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexceptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_code\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0merror_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparsed_response\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moperation_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mparsed_response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mClientError\u001b[0m: An error occurred (AccessDeniedException) when calling the GetProducts operation: User: arn:aws:sts::574826924367:assumed-role/lsds-developer-ec2/i-0dc8948de87469b0f is not authorized to perform: pricing:GetProducts"
     ]
    }
   ],
   "source": [
    "import boto3\n",
    "import json\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "# Search product filter\n",
    "FLT = '[{{\"Field\": \"tenancy\", \"Value\": \"shared\", \"Type\": \"TERM_MATCH\"}},'\\\n",
    "      '{{\"Field\": \"operatingSystem\", \"Value\": \"{o}\", \"Type\": \"TERM_MATCH\"}},'\\\n",
    "      '{{\"Field\": \"preInstalledSw\", \"Value\": \"NA\", \"Type\": \"TERM_MATCH\"}},'\\\n",
    "      '{{\"Field\": \"instanceType\", \"Value\": \"{t}\", \"Type\": \"TERM_MATCH\"}},'\\\n",
    "      '{{\"Field\": \"location\", \"Value\": \"{r}\", \"Type\": \"TERM_MATCH\"}},'\\\n",
    "      '{{\"Field\": \"capacitystatus\", \"Value\": \"Used\", \"Type\": \"TERM_MATCH\"}}]'\n",
    "\n",
    "\n",
    "# Get current AWS price for an on-demand instance\n",
    "def get_price(region, instance, os):\n",
    "    f = FLT.format(r=region, t=instance, o=os)\n",
    "    data = client.get_products(ServiceCode='AmazonEC2', Filters=json.loads(f))\n",
    "    od = json.loads(data['PriceList'][0])['terms']['OnDemand']\n",
    "    id1 = list(od)[0]\n",
    "    id2 = list(od[id1]['priceDimensions'])[0]\n",
    "    return od[id1]['priceDimensions'][id2]['pricePerUnit']['USD']\n",
    "\n",
    "# Translate region code to region name\n",
    "def get_region_name(region_code):\n",
    "    default_region = 'EU (Ireland)'\n",
    "    endpoint_file = resource_filename('botocore', 'data/endpoints.json')\n",
    "    try:\n",
    "        with open(endpoint_file, 'r') as f:\n",
    "            data = json.load(f)\n",
    "        return data['partitions'][0]['regions'][region_code]['description']\n",
    "    except IOError:\n",
    "        return default_region\n",
    "\n",
    "\n",
    "# Use AWS Pricing API at US-East-1\n",
    "client = boto3.client('pricing', region_name='us-east-1')\n",
    "\n",
    "# Get current price for a given instance, region and os\n",
    "price = get_price(get_region_name('eu-west-1'), 'c5.xlarge', 'Linux')\n",
    "print(price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed 1.7 KiB/1.7 KiB (13.5 KiB/s) with 1 file(s) remaining\r",
      "upload: ./students.csv to s3://dev-et-data/tarballs/students.csv\r\n"
     ]
    }
   ],
   "source": [
    "! aws s3 cp students.csv s3://dev-et-data/tarballs/students.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import boto3\n",
    "\n",
    "# bucket is dev-et-data\n",
    "# tarballs is the prefix PRE - similar, but different to a directory - more later\n",
    " \n",
    "df = pd.read_csv('s3://dev-et-data/tarballs/students.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lastname</th>\n",
       "      <th>firstname</th>\n",
       "      <th>boss</th>\n",
       "      <th>division</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Anthony</td>\n",
       "      <td>Michelle (Contractor) L</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ballu</td>\n",
       "      <td>Anudeep (Contractor)</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Benedict</td>\n",
       "      <td>Trenton D</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Boyte</td>\n",
       "      <td>Stephen</td>\n",
       "      <td>Kristi Sayler</td>\n",
       "      <td>Integrated Science &amp; Applications Branch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bunde</td>\n",
       "      <td>Brett (Contractor)</td>\n",
       "      <td>Danny (Contractor) Howard</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Butzer</td>\n",
       "      <td>Tony (Contractor)</td>\n",
       "      <td>Cory (Contractor) Van Batavia</td>\n",
       "      <td>Satellite Ground System Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Dahal</td>\n",
       "      <td>Devendra (Contractor)</td>\n",
       "      <td>Danny (Contractor) Howard</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Danielson</td>\n",
       "      <td>Patrick (Contractor)</td>\n",
       "      <td>Danny (Contractor) Howard</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Holen</td>\n",
       "      <td>Cheryl (Contractor) L</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Mainali</td>\n",
       "      <td>Pukar (Contractor)</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Mcelhone</td>\n",
       "      <td>Maxwell T</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Oimoen</td>\n",
       "      <td>Michael (Contractor) J</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Pastick</td>\n",
       "      <td>Neal (Contractor) J</td>\n",
       "      <td>Danny (Contractor) Howard</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Postma</td>\n",
       "      <td>Kory (Contractor)</td>\n",
       "      <td>Jayson (Contractor) Holter</td>\n",
       "      <td>Satellite Ground System Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Rigge</td>\n",
       "      <td>Matthew B</td>\n",
       "      <td>Kristi Sayler</td>\n",
       "      <td>Integrated Science &amp; Applications Branch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Rover</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>Peter Doucette</td>\n",
       "      <td>Integrated Science &amp; Applications Branch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Schoen</td>\n",
       "      <td>Candi (Contractor)</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Shrestha</td>\n",
       "      <td>Dinesh</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Smith</td>\n",
       "      <td>Kelcy (Contractor) L</td>\n",
       "      <td>Ryan (Contractor) Reker</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Sun</td>\n",
       "      <td>Minxuan</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Wylie</td>\n",
       "      <td>Bruce K</td>\n",
       "      <td>Kristi Sayler</td>\n",
       "      <td>Integrated Science &amp; Applications Branch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Young</td>\n",
       "      <td>Claudia (Contractor)</td>\n",
       "      <td>Calli (Contractor) Jenkerson</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Zhou</td>\n",
       "      <td>Qiang (Contractor)</td>\n",
       "      <td>Ramesh (Contractor) Singh</td>\n",
       "      <td>Science Division</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     lastname                firstname                            boss  \\\n",
       "0     Anthony  Michelle (Contractor) L    Calli (Contractor) Jenkerson   \n",
       "1       Ballu     Anudeep (Contractor)    Calli (Contractor) Jenkerson   \n",
       "2    Benedict                Trenton D    Calli (Contractor) Jenkerson   \n",
       "3       Boyte                  Stephen                   Kristi Sayler   \n",
       "4       Bunde       Brett (Contractor)       Danny (Contractor) Howard   \n",
       "5      Butzer        Tony (Contractor)   Cory (Contractor) Van Batavia   \n",
       "6       Dahal    Devendra (Contractor)       Danny (Contractor) Howard   \n",
       "7   Danielson     Patrick (Contractor)       Danny (Contractor) Howard   \n",
       "8       Holen    Cheryl (Contractor) L    Calli (Contractor) Jenkerson   \n",
       "9     Mainali       Pukar (Contractor)    Calli (Contractor) Jenkerson   \n",
       "10   Mcelhone                Maxwell T    Calli (Contractor) Jenkerson   \n",
       "11     Oimoen   Michael (Contractor) J    Calli (Contractor) Jenkerson   \n",
       "12    Pastick      Neal (Contractor) J       Danny (Contractor) Howard   \n",
       "13     Postma        Kory (Contractor)      Jayson (Contractor) Holter   \n",
       "14      Rigge                Matthew B                   Kristi Sayler   \n",
       "15      Rover                 Jennifer                  Peter Doucette   \n",
       "16     Schoen       Candi (Contractor)    Calli (Contractor) Jenkerson   \n",
       "17   Shrestha                   Dinesh    Calli (Contractor) Jenkerson   \n",
       "18      Smith     Kelcy (Contractor) L         Ryan (Contractor) Reker   \n",
       "19        Sun                  Minxuan    Calli (Contractor) Jenkerson   \n",
       "20      Wylie                  Bruce K                   Kristi Sayler   \n",
       "21      Young     Claudia (Contractor)    Calli (Contractor) Jenkerson   \n",
       "22       Zhou       Qiang (Contractor)       Ramesh (Contractor) Singh   \n",
       "\n",
       "                                     division  \n",
       "0                            Science Division  \n",
       "1                            Science Division  \n",
       "2                            Science Division  \n",
       "3    Integrated Science & Applications Branch  \n",
       "4                            Science Division  \n",
       "5            Satellite Ground System Division  \n",
       "6                            Science Division  \n",
       "7                            Science Division  \n",
       "8                            Science Division  \n",
       "9                            Science Division  \n",
       "10                           Science Division  \n",
       "11                           Science Division  \n",
       "12                           Science Division  \n",
       "13           Satellite Ground System Division  \n",
       "14   Integrated Science & Applications Branch  \n",
       "15   Integrated Science & Applications Branch  \n",
       "16                           Science Division  \n",
       "17                           Science Division  \n",
       "18                           Science Division  \n",
       "19                           Science Division  \n",
       "20   Integrated Science & Applications Branch  \n",
       "21                           Science Division  \n",
       "22                           Science Division  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "! cp ~/opt/notebook/01-Everything-but-harmony/99-Old-Notebooks/reference/notebooks/aws/.ipynb_checkpoints/amazonPricelistAnalysis-Copy1-checkpoint.ipynb ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "00-git-clone-download-class-notebook-materials.ipynb\r\n",
      "01-Students.ipynb\r\n",
      "01-notebook-basic-navigation.ipynb\r\n",
      "02-markdown.ipynb\r\n",
      "02a-creating-a-new-notebook.ipynb\r\n",
      "03-zen.ipynb\r\n",
      "04-students-redirector.ipynb\r\n",
      "05-Ten-Things.ipynb\r\n",
      "06-AWS_price_Catalog_EC2.ipynb\r\n",
      "99-Students-Copy1.ipynb\r\n",
      "amazonPricelistAnalysis-Copy1-checkpoint.ipynb\r\n",
      "index.json\r\n",
      "students.csv\r\n",
      "studentsV1.csv\r\n",
      "studentsV2.csv\r\n"
     ]
    }
   ],
   "source": [
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "! mv amazonPricelistAnalysis-Copy1-checkpoint.ipynb 06a-amazonPricelistAnalysis.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
